- platform: mqtt
  name: "openEVSE Amps"
  state_topic: "tele/i3/inside/commons/openevse/amp"
  unit_of_measurement: "milliamps"
  force_update: True
  
- platform: mqtt
  name: "openEVSE Watt Seconds"
  state_topic: "tele/i3/inside/commons/openevse/wh"
  unit_of_measurement: "Watt seconds"
  force_update: True
  
- platform: mqtt
  name: "openEVSE State"
  state_topic: "tele/i3/inside/commons/openevse/state"
  force_update: True

- platform: template
  sensors:
    ev_charger_state:
      friendly_name: "EV Charger Status"
      value_template: >-
        {% if is_state('sensor.openEVSE_State', '1') %}
          Unplugged
        {% elif is_state('sensor.openEVSE_State', '2') %}
          Plugged_in
        {% elif is_state('sensor.openEVSE_State', '3') %}
          Charging
        {% else %}
          Unknown
        {% endif %}
      icon_template: >-
        {% if is_state('sensor.openEVSE_State', '1') %}
          mdi:power-plug-off
        {% elif is_state('sensor.openEVSE_State', '2') %}
          mdi:power-plug
        {% elif is_state('sensor.openEVSE_State', '3') %}
          mdi:battery-charging
        {% else %}
          mdi:help-circle
        {% endif %}
    ev_charger_amps:
      friendly_name: "EV Charger Amps"
      unit_of_measurement: 'Amps'
      value_template: "{{ states('sensor.openEVSE_Amps')|float / 1000 | round(1) }}"
      icon_template: >-
         {% if states('sensor.openEVSE_Amps')|float > 0 %}
            mdi:battery-charging
          {% else %}
            mdi:power-plug-off
          {% endif %}
    ev_charger_wh:
      friendly_name: "EV Charger kWh"
      unit_of_measurement: 'kWh'
      value_template: "{{ states('sensor.openEVSE_Watt_Seconds') | multiply(1/3600000) | round(2) }}"